import React from "react";
import ReactDOM from "react-dom/client";

const heading = React.createElement("h1", {}, "Namaste Everyone!");
const jsxsyntax =<h1>hello this is a jsx syntax</h1>;

// both jsx and react create element are used to make a react element ,but jsx and react core element are different

// It's a syntax that looks like HTML inside JavaScript.

// Makes code more readable and concise.

// Must be compiled by Babel into JavaScript.

// It's a plain JavaScript object.

// Created using React.createElement().

// React uses it internally to render UI.



// this  is a  react element*****
const ele = (
    <h2 className="head">
        this is a arrow function
    </h2>
)

// this is a react functional component and name should be from capital letter
const Compo = () =>{
    return (
        <>
       
    <h2 className="head">
        this is react functional component  
    </h2>
        </>
    )
}

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<Compo/>); // ✅ Pass the element here

// dfkomodifm

// const heading = React.createElement(
//     "h1",
//     {
//         id: "title",
//     },
//     "Heading 1"
// );

// const heading2 = React.createElement(
//     "h2",
//     {
//         id: "title",
//     },
//     "Heading 2"
// );

// const container = React.createElement(
//     "div",
//     null,
//     heading,
//     heading2
// );

// const root = ReactDOM.createRoot(document.getElementById("root"));
// root.render(container);

                                 // all about useefect hook
1. Component render phase
When your component function runs:
This line executes immediately during rendering (before React commits the UI to the DOM)
So this proves that normal JS code inside your component runs first.

2.Commit phase → then useEffect
useEffect runs after the render is painted on the screen.

React first builds the UI tree → commits it to the DOM → then runs effects.

That’s why you see "now body is rendered" first in the console, and only after that "useEffect is called in the console".

3. Why this order?

Because useEffect is meant for side effects (things outside rendering, like:

fetching data

subscriptions

DOM updates

timers